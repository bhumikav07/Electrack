{"ast":null,"code":"var _jsxFileName = \"/Users/bhumika/Desktop/College/FYP/electrack-ui/src/RealTimeChart.js\";\n// import React, { useState, useEffect } from 'react';\n// import { Line } from '@ant-design/charts';\n// const DemoLine = () => {\n//     const [data, setData] = useState([]);\n//     useEffect(() => {\n//         asyncFetch();\n//     }, []);\n//     const asyncFetch = () => {\n//         fetch('http://localhost:8888/visualize-history')\n//             .then((response) => response.json())\n//             .then((json) => setData(json))\n//             .catch((error) => {\n//             console.log('fetch data failed', error);\n//         });\n//     };\n//     var config = {\n//         data: data,\n//         xField: 'date',\n//         yField: 'power',\n//         seriesField: 'category',\n//         xAxis: { type: 'time' },\n//         yAxis: {\n//             label: {\n//                 formatter: function formatter(v) {\n//                     return ''.concat(v).replace(/\\d{1,3}(?=(\\d{3})+$)/g, function (s) {\n//                         return ''.concat(s, ',');\n//                     });\n//                 },\n//             },\n//         },\n//         color : [ '#1979C9'],\n//     };\n//     return <Line {...config}/>;\n// };\n// export default DemoLine;\nimport React, { useState, useEffect } from 'react';\nimport { Line } from '@ant-design/charts';\n\nconst DemoLine = () => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    asyncFetch();\n  }, []);\n\n  const asyncFetch = () => {\n    var sock = new WebSocket(\"ws://192.168.1.11:3000\"); //replace this address with the one the node.js server prints out. keep port 3000\n\n    sock.onopen = function (event) {\n      //alert(\"Socket connected succesfully!!!\")\n      console.log(\"Connection Successful\");\n    };\n\n    sock.onmessage = function (event) {\n      console.log(event); //show received from server data in console of browser\n\n      var values = event.data.split(\":\");\n      var datadetails = {\n        \"voltage\": values[0],\n        \"current\": values[1],\n        \"power\": values[2],\n        \"energy\": values[3]\n      };\n      setData([...data, datadetails]);\n    };\n  };\n\n  var config = {\n    data: data,\n    padding: 'auto',\n    xField: 'date',\n    yField: 'power',\n    xAxis: {\n      tickCount: 5\n    }\n  };\n  return /*#__PURE__*/React.createElement(Line, Object.assign({}, config, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }\n  }));\n};\n\nexport default DemoLine;","map":{"version":3,"sources":["/Users/bhumika/Desktop/College/FYP/electrack-ui/src/RealTimeChart.js"],"names":["React","useState","useEffect","Line","DemoLine","data","setData","asyncFetch","sock","WebSocket","onopen","event","console","log","onmessage","values","split","datadetails","config","padding","xField","yField","xAxis","tickCount"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,oBAArB;;AACA,MAAMC,QAAQ,GAAG,MAAM;AACnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;;AAGA,QAAMA,UAAU,GAAG,MAAM;AACrB,QAAIC,IAAI,GAAG,IAAIC,SAAJ,CAAc,wBAAd,CAAX,CADqB,CAC+B;;AAEpDD,IAAAA,IAAI,CAACE,MAAL,GAAc,UAAUC,KAAV,EAAiB;AAC3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEH,KAJD;;AAKAL,IAAAA,IAAI,CAACM,SAAL,GAAiB,UAAUH,KAAV,EAAiB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAD8B,CACV;;AACpB,UAAII,MAAM,GAAGJ,KAAK,CAACN,IAAN,CAAWW,KAAX,CAAiB,GAAjB,CAAb;AACA,UAAIC,WAAW,GAAG;AACd,mBAAWF,MAAM,CAAC,CAAD,CADH;AAEd,mBAAWA,MAAM,CAAC,CAAD,CAFH;AAGd,iBAASA,MAAM,CAAC,CAAD,CAHD;AAId,kBAAUA,MAAM,CAAC,CAAD;AAJF,OAAlB;AAMAT,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUY,WAAV,CAAD,CAAP;AACH,KAVD;AAWH,GAnBD;;AAuBA,MAAIC,MAAM,GAAG;AACTb,IAAAA,IAAI,EAAEA,IADG;AAETc,IAAAA,OAAO,EAAE,MAFA;AAGTC,IAAAA,MAAM,EAAE,MAHC;AAITC,IAAAA,MAAM,EAAE,OAJC;AAKTC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb;AALE,GAAb;AAOA,sBAAO,oBAAC,IAAD,oBAAUL,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACH,CApCD;;AAqCA,eAAed,QAAf","sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Line } from '@ant-design/charts';\n// const DemoLine = () => {\n//     const [data, setData] = useState([]);\n//     useEffect(() => {\n//         asyncFetch();\n//     }, []);\n//     const asyncFetch = () => {\n//         fetch('http://localhost:8888/visualize-history')\n//             .then((response) => response.json())\n//             .then((json) => setData(json))\n//             .catch((error) => {\n//             console.log('fetch data failed', error);\n//         });\n//     };\n//     var config = {\n//         data: data,\n//         xField: 'date',\n//         yField: 'power',\n//         seriesField: 'category',\n//         xAxis: { type: 'time' },\n//         yAxis: {\n//             label: {\n//                 formatter: function formatter(v) {\n//                     return ''.concat(v).replace(/\\d{1,3}(?=(\\d{3})+$)/g, function (s) {\n//                         return ''.concat(s, ',');\n//                     });\n//                 },\n//             },\n//         },\n//         color : [ '#1979C9'],\n//     };\n//     return <Line {...config}/>;\n// };\n// export default DemoLine;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from '@ant-design/charts';\nconst DemoLine = () => {\n    const [data, setData] = useState([]);\n    useEffect(() => {\n        asyncFetch();\n    }, []);\n    const asyncFetch = () => {\n        var sock = new WebSocket(\"ws://192.168.1.11:3000\"); //replace this address with the one the node.js server prints out. keep port 3000\n\n        sock.onopen = function (event) {\n            //alert(\"Socket connected succesfully!!!\")\n            console.log(\"Connection Successful\");\n\n        };\n        sock.onmessage = function (event) {\n            console.log(event); //show received from server data in console of browser\n            var values = event.data.split(\":\");\n            var datadetails = {\n                \"voltage\": values[0],\n                \"current\": values[1],\n                \"power\": values[2],\n                \"energy\": values[3]\n            }\n            setData([...data, datadetails]);\n        }\n    };\n\n\n\n    var config = {\n        data: data,\n        padding: 'auto',\n        xField: 'date',\n        yField: 'power',\n        xAxis: { tickCount: 5 },\n    };\n    return <Line {...config} />;\n};\nexport default DemoLine;"]},"metadata":{},"sourceType":"module"}